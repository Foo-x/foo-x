{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/nim-contest-macro/","result":{"data":{"markdownRemark":{"fields":{"slug":"/blog/nim-contest-macro/"},"id":"64fc57d9-3415-5111-abef-c2b09ce47d27","excerpt":"Nimで競プロの入力を変数にバインドするマクロを作成しました。 2020/08/25 floatに変換するものを追加 タプルにバインドするものを追加 例 実装 については以下の記事を参考にさせていただきました。 Nimの競技プログラミング用標準入力（追記: リンク切れ） オーバーロードしている…","html":"<p>Nimで競プロの入力を変数にバインドするマクロを作成しました。</p>\n<ul>\n<li>\n<p>2020/08/25</p>\n<ul>\n<li>floatに変換するものを追加</li>\n<li>タプルにバインドするものを追加</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"例\" style=\"position:relative;\"><a href=\"#%E4%BE%8B\" aria-label=\"例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例</h2>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token comment\"># 長さnのリスト</span>\n<span class=\"token comment\"># 5</span>\n<span class=\"token comment\"># 1 2 3 4 5</span>\n\n<span class=\"token keyword\">var</span>\n  n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n  v <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\necho n  <span class=\"token comment\"># => 5</span>\necho v  <span class=\"token comment\"># => @[1, 2, 3, 4, 5]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token comment\"># n行m列のリスト</span>\n<span class=\"token comment\"># 2 3</span>\n<span class=\"token comment\"># 1 2 3</span>\n<span class=\"token comment\"># 4 5 6</span>\n\n<span class=\"token keyword\">var</span>\n  n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n  m <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n  v <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n\necho n  <span class=\"token comment\"># => 2</span>\necho m  <span class=\"token comment\"># => 3</span>\necho v  <span class=\"token comment\"># => @[@[1, 2, 3], @[4, 5, 6]]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token comment\"># n行m列の盤面</span>\n<span class=\"token comment\"># 3 4</span>\n<span class=\"token comment\"># ####</span>\n<span class=\"token comment\"># #..#</span>\n<span class=\"token comment\"># .#.#</span>\n\n<span class=\"token keyword\">var</span>\n  n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n  m <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n  v <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n\necho n  <span class=\"token comment\"># => 3</span>\necho m  <span class=\"token comment\"># => 4</span>\necho v  <span class=\"token comment\"># => @[@['#', '#', '#', '#'], @['#', '.', '.', '#'], @['.', '#', '.', '#']]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token comment\"># 複数の値</span>\n<span class=\"token comment\"># 3 abc</span>\n\n<span class=\"token keyword\">var</span>\n  <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span>\n\necho n  <span class=\"token comment\"># => 3</span>\necho s  <span class=\"token comment\"># => abc</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token comment\"># n行複数列</span>\n<span class=\"token comment\"># 2</span>\n<span class=\"token comment\"># abc 1 2</span>\n<span class=\"token comment\"># xyz 3 4</span>\n\n<span class=\"token keyword\">var</span>\n  n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n  r <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">)</span>\n\necho n  <span class=\"token comment\"># => 2</span>\necho r  <span class=\"token comment\"># => @[(\"abc\", 1, 2), (\"xyz\", 3, 4)]</span></code></pre></div>\n<h2 id=\"実装\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E8%A3%85\" aria-label=\"実装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実装</h2>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">import</span> strformat<span class=\"token punctuation\">,</span> macros<span class=\"token punctuation\">,</span> sequtils<span class=\"token punctuation\">,</span> strutils\n\n<span class=\"token keyword\">let</span> readNext <span class=\"token operator\">=</span> <span class=\"token keyword\">iterator</span><span class=\"token punctuation\">(</span>getsChar<span class=\"token operator\">:</span> bool <span class=\"token operator\">=</span> false<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{.</span>closure<span class=\"token punctuation\">.}</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">for</span> s <span class=\"token operator\">in</span> stdin<span class=\"token operator\">.</span>readAll<span class=\"token operator\">.</span>split<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span> getsChar<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">for</span> i <span class=\"token operator\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span>s<span class=\"token operator\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">yield</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">..</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">yield</span> s\n\n<span class=\"token keyword\">proc</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> typedesc<span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token function\">readNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">proc</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> typedesc<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> char <span class=\"token operator\">=</span> <span class=\"token function\">readNext</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">proc</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> typedesc<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> int <span class=\"token operator\">=</span> <span class=\"token function\">readNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>parseInt\n<span class=\"token keyword\">proc</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> typedesc<span class=\"token punctuation\">[</span>float<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> float <span class=\"token operator\">=</span> <span class=\"token function\">readNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>parseFloat\n\n<span class=\"token keyword\">macro</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> typedesc<span class=\"token punctuation\">,</span> n<span class=\"token operator\">:</span> varargs<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> untyped <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">var</span> repStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token keyword\">for</span> arg <span class=\"token operator\">in</span> n<span class=\"token operator\">:</span>\n    repStr <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">&amp;</span><span class=\"token string\">\"({arg.repr}).newSeqWith \"</span>\n  <span class=\"token function\">parseExpr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token string\">\"{repStr}read({t})\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">macro</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>ts<span class=\"token operator\">:</span> varargs<span class=\"token punctuation\">[</span>auto<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> untyped <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">var</span> tupStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token keyword\">for</span> t <span class=\"token operator\">in</span> ts<span class=\"token operator\">:</span>\n    tupStr <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">&amp;</span><span class=\"token string\">\"read({t.repr}),\"</span>\n  <span class=\"token function\">parseExpr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token string\">\"({tupStr})\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">macro</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> int<span class=\"token punctuation\">,</span> ts<span class=\"token operator\">:</span> varargs<span class=\"token punctuation\">[</span>auto<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> untyped <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">for</span> typ <span class=\"token operator\">in</span> ts<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span> typ<span class=\"token operator\">.</span>typeKind <span class=\"token operator\">!=</span> ntyAnything<span class=\"token operator\">:</span>\n      <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected typedesc, got \"</span> <span class=\"token operator\">&amp;</span> typ<span class=\"token operator\">.</span>repr<span class=\"token punctuation\">,</span> typ<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">parseExpr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token string\">\"({n.repr}).newSeqWith read({ts.repr})\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">readNext</code>については以下の記事を参考にさせていただきました。<br>\n<a href=\"https://qiita.com/cunitac/items/f0900f17d8d1c652855e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nimの競技プログラミング用標準入力</a>（追記: リンク切れ）</p>\n<p>オーバーロードしている4つの<code class=\"language-text\">proc read</code>で、与えられた型に応じて読み込んだ文字列を変換しています。</p>\n<p>1つ目の<code class=\"language-text\">macro read</code>はリストを読み込むマクロです。<br>\n1つ目の引数は要素の型です。<br>\n2つ目以降は整数の可変長引数で、各次元の長さに対応します。<br>\nたとえば、2×3の整数リストは<code class=\"language-text\">read(int, 2, 3)</code>で得られます。</p>\n<p>2つ目の<code class=\"language-text\">macro read</code>は複数の値を読み込み、タプルにバインドするマクロです。<br>\n指定された型の数がタプルの長さになります。<br>\nたとえば、int、string、charの3つの値は<code class=\"language-text\">read(int, string, char)</code>で読み込めます。<br>\nこのマクロは1引数の<code class=\"language-text\">read</code>を複数回実行する手間を減らすためのものであり、以下の2つの処理は同じ結果になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">var</span>\n  <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">var</span>\n  n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n  s <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n  c <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span></code></pre></div>\n<p>なお、すべての型が同じ場合はこのマクロは不要です。</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">var</span>\n  x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 下と同じ</span>\n<span class=\"token comment\"># var</span>\n<span class=\"token comment\">#   (x, y, z) = read(int, int, int)</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># 下も同じ</span>\n<span class=\"token comment\"># var</span>\n<span class=\"token comment\">#   x = read(int)</span>\n<span class=\"token comment\">#   y = read(int)</span>\n<span class=\"token comment\">#   z = read(int)</span></code></pre></div>\n<p>3つ目の<code class=\"language-text\">macro read</code>は複数行にわたる複数の値をタプルのリストにバインドするマクロです。<br>\n1つ目の引数は読み込む行数です。<br>\n2つ目以降は型の可変長引数で、この数がタプルの長さになります。<br>\nforループの部分は<code class=\"language-text\">read(1, 2)</code>や<code class=\"language-text\">read(4, true)</code>のように、2つ目以降の引数が型でない場合にコンパイルエラーにする処理です。<br>\nこのマクロは以下のような入力をバインドしたいケースで使用される想定です。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mtext> </mtext><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_1\\ B_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mrow><annotation encoding=\"application/x-tex\">\\vdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.03em;\"></span><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>N</mi></msub><mtext> </mtext><msub><mi>B</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_N\\ B_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">var</span>\n  N <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>\n  P <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># P => @[(A_1, B_1), ..., (A_N, B_N)]</span></code></pre></div>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li>\n<p><a href=\"https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rustで競技プログラミングの入力をスッキリ記述するマクロ</a></p>\n<ul>\n<li>マクロを呼び出す部分の記法を参考にさせていただきました</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Nimの競プロ用標準入力マクロ","date":"2020-07-23","description":null,"header":{"childImageSharp":{"fluid":{"aspectRatio":0.6666666666666666,"src":"/static/eb67807a14a57631b9e86e5a1e63a05a/25f09/header.webp","srcSet":"/static/eb67807a14a57631b9e86e5a1e63a05a/61be4/header.webp 480w,\n/static/eb67807a14a57631b9e86e5a1e63a05a/1fb14/header.webp 960w,\n/static/eb67807a14a57631b9e86e5a1e63a05a/25f09/header.webp 1920w","sizes":"(max-width: 1920px) 100vw, 1920px"}}},"ogp":{"publicURL":"/static/eb7ef2a150152b07afbf625f85e97382/ogp.jpg"},"tags":["Nim","競技プログラミング"]},"tableOfContents":"<ul>\n<li><a href=\"/blog/nim-contest-macro/#%E4%BE%8B\">例</a></li>\n<li><a href=\"/blog/nim-contest-macro/#%E5%AE%9F%E8%A3%85\">実装</a></li>\n<li><a href=\"/blog/nim-contest-macro/#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>"}},"pageContext":{"id":"64fc57d9-3415-5111-abef-c2b09ce47d27"}},"staticQueryHashes":["3159585216","3357329864","3468387890","3862782001"]}