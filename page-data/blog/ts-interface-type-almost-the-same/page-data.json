{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/ts-interface-type-almost-the-same/","result":{"data":{"markdownRemark":{"fields":{"slug":"/blog/ts-interface-type-almost-the-same/"},"id":"514e22cc-1dd9-5c5e-88fe-b86d4e60ccee","excerpt":"気づいたきっかけは下の記事。 interfaceとtypeの違い、そして何を使うべきかについて 昔の仕様 以前のは、「新しい名前を作らない」という仕様があった。 たとえば、コンパイルエラーの出力には元の型名が表示されていた。 Type aliases don’t create a new name — for…","html":"<p>気づいたきっかけは下の記事。</p>\n<p><a href=\"https://zenn.dev/luvmini511/articles/6c6f69481c2d17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">interfaceとtypeの違い、そして何を使うべきかについて</a></p>\n<h2 id=\"昔の仕様\" style=\"position:relative;\"><a href=\"#%E6%98%94%E3%81%AE%E4%BB%95%E6%A7%98\" aria-label=\"昔の仕様 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>昔の仕様</h2>\n<p>以前の<code class=\"language-text\">type</code>は、「新しい名前を作らない」という仕様があった。<br>\nたとえば、コンパイルエラーの出力には元の型名が表示されていた。</p>\n<blockquote>\n<p>Type aliases don’t create a new name — for instance, error messages won’t use the alias name.</p>\n</blockquote>\n<p>(<a href=\"https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c</a>)</p>\n<p>他にも<code class=\"language-text\">type</code>はextends/implementsできないという仕様もあったりして、なかなかに使いにくかった。</p>\n<p>そのような状況だったので、基本的には<code class=\"language-text\">interface</code>を使い、それでは表せない型にだけ<code class=\"language-text\">type</code>を使っていた。<br>\n今はもうほとんど差がなくなっていたなんて…</p>\n<h2 id=\"今後の方針\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%AE%E6%96%B9%E9%87%9D\" aria-label=\"今後の方針 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今後の方針</h2>\n<p><code class=\"language-text\">interface</code>は同じ名前で複数回定義して拡張できるという仕様があるけど、これいる…？<br>\n最初に紹介した記事にも書かれている通り、混乱のもとにしかならない気がする。<br>\nこれからは表現力の高い<code class=\"language-text\">type</code>をメインに使っていきたい。</p>","frontmatter":{"title":"TypeScriptのinterfaceとtypeがいつの間にかほとんど同じになっていた","date":"2020-12-16","description":null,"header":{"childImageSharp":{"fluid":{"aspectRatio":1.6,"src":"/static/9bc1615a65fc04554015ba23b62da7b6/d8255/header.jpg","srcSet":"/static/9bc1615a65fc04554015ba23b62da7b6/9104c/header.jpg 480w,\n/static/9bc1615a65fc04554015ba23b62da7b6/a6352/header.jpg 960w,\n/static/9bc1615a65fc04554015ba23b62da7b6/d8255/header.jpg 1920w","sizes":"(max-width: 1920px) 100vw, 1920px"}}},"ogp":{"publicURL":"/static/86c71323b0505f2e855ba0190c905356/ogp.jpg"},"tags":["TypeScript"]},"tableOfContents":"<ul>\n<li><a href=\"/blog/ts-interface-type-almost-the-same/#%E6%98%94%E3%81%AE%E4%BB%95%E6%A7%98\">昔の仕様</a></li>\n<li><a href=\"/blog/ts-interface-type-almost-the-same/#%E4%BB%8A%E5%BE%8C%E3%81%AE%E6%96%B9%E9%87%9D\">今後の方針</a></li>\n</ul>"}},"pageContext":{"id":"514e22cc-1dd9-5c5e-88fe-b86d4e60ccee"}},"staticQueryHashes":["3159585216","3357329864","3468387890","3862782001"]}