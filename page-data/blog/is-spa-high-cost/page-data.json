{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/is-spa-high-cost/",
    "result": {"data":{"markdownRemark":{"fields":{"slug":"/blog/is-spa-high-cost/"},"id":"7bdc2c73-2f3d-563d-a207-48a5501b3d2b","excerpt":"なぜ僕が「SPAはコストが高い」と考えているのか を読みました。\n「反論お待ちしています」とのことなので、書いてみます。 結論としては、\nコストが低いのは慣れているほうだよ。\nどっちも使えるならSPAのほうが低いよ。\nです。 前提 元記事で挙げられている前提をまとめます。 用語 SPA…","html":"<p><a href=\"https://zenn.dev/sesere/articles/c3917db32777af\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">なぜ僕が「SPAはコストが高い」と考えているのか</a> を読みました。\n「反論お待ちしています」とのことなので、書いてみます。</p>\n<p>結論としては、\n<strong>コストが低いのは慣れているほうだよ。</strong>\n<strong>どっちも使えるならSPAのほうが低いよ。</strong>\nです。</p>\n<h2 id=\"前提\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E6%8F%90\" aria-label=\"前提 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前提</h2>\n<p>元記事で挙げられている前提をまとめます。</p>\n<ul>\n<li>用語\n<ul>\n<li>SPAとは、クライアント側でビューを構築する方式を指す</li>\n<li>MPAとは、サーバ側でビューを構築する方式を指す</li>\n</ul>\n</li>\n<li>背景\n<ul>\n<li>エンジニアのスキルはあまり高くない</li>\n<li>開発期間は1.5年未満</li>\n<li>PMFを意識したフェーズであり、チャレンジを繰り返す</li>\n<li>ログイン機能が存在するサービスを作る</li>\n</ul>\n</li>\n<li>コストの定義\n<ul>\n<li>エンジニアの採用のしやすさ</li>\n<li>サービス開発の <strong>初速</strong></li>\n<li>サービス開発の <strong>継続性</strong></li>\n<li>分業のしやすさ、手伝ってもらいやすさ</li>\n<li>web標準の挙動の実現のしやすさ</li>\n<li>セキュアなデータを流出する可能性の高低</li>\n<li>バグがあった時の気づきやすさ / 対応のしやすさ</li>\n<li>ドキュメントの多さ</li>\n</ul>\n</li>\n<li>元記事の筆者の技術歴\n<ul>\n<li>Railsを約11年</li>\n<li>Reactを約5年</li>\n<li>その他\n<ul>\n<li>業務でNext、Nuxt</li>\n<li>趣味でRiot、Svelte</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>参考までに私の技術歴は以下の通りです。</p>\n<ul>\n<li>SpringとPlayを同時期に約3年ずつ</li>\n<li>Vue/Nuxt を約4年</li>\n<li>その他\n<ul>\n<li>業務でLaravel、Django、Flask、React/Next</li>\n<li>趣味でPhoenix</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-web標準の挙動の実現のしやすさについて\" style=\"position:relative;\"><a href=\"#3-web%E6%A8%99%E6%BA%96%E3%81%AE%E6%8C%99%E5%8B%95%E3%81%AE%E5%AE%9F%E7%8F%BE%E3%81%AE%E3%81%97%E3%82%84%E3%81%99%E3%81%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"3 web標準の挙動の実現のしやすさについて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>「3. web標準の挙動の実現のしやすさ」について</h2>\n<blockquote>\n<p>zenn.devさんでも「Popular Topics」→「○○をもっと見る→」を押した後に戻るボタンを押すとスクロールバーの位置がおかしくなる～と言ったバグがあります</p>\n</blockquote>\n<p>こちらはSPAではなく要件の問題です。\n画面の一部を非同期で取得していることが原因です。\nそのような要件がなければ発生しませんし、逆にあるのであればMPAでも発生する可能性があります。\nMPAではそのような要件は生まれない、もしくは生まれたとしても対応しないのであればたしかに発生しませんが。</p>\n<blockquote>\n<p>ちょっと前ですがpixiv sketchさんでもログインして戻るボタンを押したらログインしてないことになってバグる～とかありました</p>\n</blockquote>\n<p>詳細がわからないので推測になりますが、ログインしているのにログイン画面が表示されてしまうということでしょうか？\nそれであればSPAではなくルーティングの問題です。\nSPAかMPAかによらず、認証状態に応じたルーティングを行わなければ発生します。\nどちらであってもその実装コストは変わりません。</p>\n<p>ブラウザバック関連だと、逆にMPAのほうがコストがかかるケースもあります。\nたとえば以下のようなフローです。</p>\n<ol>\n<li>ページAからページBに遷移する</li>\n<li>ページBのフォームに入力して送信する</li>\n<li>サーバ側でエラーが発生し、クライアントの画面上にその旨が表示される\n<ul>\n<li>たとえばユニークな項目に重複する値を入れた場合など</li>\n</ul>\n</li>\n<li>ブラウザバックでページAに戻ろうとすると、ページAではなくフォームを入力する前のページBに戻ってしまう</li>\n</ol>\n<p>MPAだと2.と3.の間でページ遷移しているために発生する問題です。\nSPAであればレスポンスを受けてからページ遷移できるので発生しません。</p>\n<h2 id=\"4-セキュアなデータを流出する可能性の高低について\" style=\"position:relative;\"><a href=\"#4-%E3%82%BB%E3%82%AD%E3%83%A5%E3%82%A2%E3%81%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%B5%81%E5%87%BA%E3%81%99%E3%82%8B%E5%8F%AF%E8%83%BD%E6%80%A7%E3%81%AE%E9%AB%98%E4%BD%8E%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"4 セキュアなデータを流出する可能性の高低について permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>「4. セキュアなデータを流出する可能性の高低」について</h2>\n<p>元記事の主張は以下のような内容です。</p>\n<p>MPAではサーバ側でデータを埋め込んだビューを構築してから返すので、通信時に不要なデータが含まれない。\nSPAではサーバからデータを受け取ったあとにビューを構築するので、通信時に不要なデータが含まれる可能性がある。</p>\n<p>こちらもSPAの問題ではありません。API設計の問題です。\n元記事ではOpenAPIを導入するコストがかかると書かれていますが、不要です。\nAPI側でレスポンスに型を付けるだけで良いです。\n単体テストを書くだけでも良いです。</p>\n<p>このあたりはむしろMPAのほうが怖いと思っています。\nSPAではAPIが境界になっているので、そのインタフェースのデータしか通信されない安心感があります。\nしかし、テンプレートエンジンを使った場合は、サーバ側のすべてのデータについて埋め込まれる可能性があります。\nしかもほとんどのエンジンは型で守られていません。</p>\n<p>ちなみに元記事にはSPAで起きた事故の例が貼られていますが、仮にSPAで事故が多かったとしても、それはMPAで事故が少ないことを意味しません。</p>\n<h2 id=\"5バグがあった時の気づきやすさ--対応のしやすさについて\" style=\"position:relative;\"><a href=\"#5%E3%83%90%E3%82%B0%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E6%B0%97%E3%81%A5%E3%81%8D%E3%82%84%E3%81%99%E3%81%95--%E5%AF%BE%E5%BF%9C%E3%81%AE%E3%81%97%E3%82%84%E3%81%99%E3%81%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"5バグがあった時の気づきやすさ  対応のしやすさについて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>「5.バグがあった時の気づきやすさ / 対応のしやすさ」について</h2>\n<blockquote>\n<p>SPAはその性質上エラーがクライアントサイドで発生するのでエラーハンドリングをするためにも知識が必要となります</p>\n<p>いや、わかりますよ？sentryでも入れれば良いだろ？って話だと思います。でもそれもまたスキルが必要です。今回想定しているような層はそもそもエラーハンドリングなんて概念がないと思いますし、何もしなくてもエラーが起こったらサーバーサイドにエラーログが残るというシンプルな仕組みのほうがコストが低いと思うわけです</p>\n</blockquote>\n<p>SPAにもサーバサイドはありますし、MPAにもクライアントサイドはあります。\nSPAがAPI側でエラーを起こさないわけではないですし、MPAがクライアント側でエラーを起こさないわけでもないです。\nSPAはクライアントサイドの処理が多くなるので、その分だけエラーに気づきにくいという意味であればその通りだと思います。</p>\n<p>ただ、SPAは TypeScript を使うことでビューも型で守れるようになるので、バグ自体を減らすことができます。\n前項の通り、ほとんどのテンプレートエンジンでは守れません。</p>\n<blockquote>\n<p>サーバー→フロントに分離していることでエラーがどこで起こっているのか分かりづらかったりなどの問題もあります</p>\n</blockquote>\n<p>こちらに関してはむしろ分離されているほうが分かりやすいと思います。</p>\n<h2 id=\"6ドキュメントの多さについて\" style=\"position:relative;\"><a href=\"#6%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E5%A4%9A%E3%81%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"6ドキュメントの多さについて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>「6.ドキュメントの多さ」について</h2>\n<p>こちらはSPAではなくフレームワークの問題です。\n元記事ではQiitaのタグ検索でヒットする記事の件数を根拠としています。</p>\n<ul>\n<li>Laravel\n<ul>\n<li>約10,000件</li>\n</ul>\n</li>\n<li>Rails\n<ul>\n<li>約35,000件</li>\n</ul>\n</li>\n<li>Next.js\n<ul>\n<li>約1,500件</li>\n</ul>\n</li>\n<li>Nuxt\n<ul>\n<li>約3,500件</li>\n</ul>\n</li>\n</ul>\n<p>他のMPAのフレームワークを検索してみましょう。</p>\n<ul>\n<li>Django: <a href=\"https://qiita.com/tags/django\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/tags/django</a>\n<ul>\n<li>約4,700件</li>\n</ul>\n</li>\n<li>Spring Boot: <a href=\"https://qiita.com/tags/spring-boot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/tags/spring-boot</a>\n<ul>\n<li>約2,500件</li>\n</ul>\n</li>\n<li>Flask: <a href=\"https://qiita.com/tags/flask\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/tags/flask</a>\n<ul>\n<li>約1,700件</li>\n</ul>\n</li>\n<li>Express: <a href=\"https://qiita.com/tags/express\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/tags/express</a>\n<ul>\n<li>約1,400件</li>\n</ul>\n</li>\n<li>Phoenix: <a href=\"https://qiita.com/tags/phoenix\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/tags/phoenix</a>\n<ul>\n<li>約700件</li>\n</ul>\n</li>\n<li>Play Framework: <a href=\"https://qiita.com/tags/playframework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/tags/playframework</a>\n<ul>\n<li>約600件</li>\n</ul>\n</li>\n<li>Gin: <a href=\"https://qiita.com/tags/gin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/tags/gin</a>\n<ul>\n<li>約200件</li>\n</ul>\n</li>\n<li>Actix Web: <a href=\"https://qiita.com/tags/actix-web\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/tags/actix-web</a>\n<ul>\n<li>約40件</li>\n</ul>\n</li>\n</ul>\n<p>SPAだから少なくてMPAだから多いわけではないです。\nLaravelとRailsが特別なだけです。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>以上、SPAはMPAと比較してコストが高いわけではなく、むしろ低いケースもあることを書きました。</p>\n<p>クライアント側はサーバ側よりも変更されやすいので、クライアント側を修正しやすいSPAを使うとコストが低くなるという観点もあります。\n背景が「PMFを意識したフェーズであり、チャレンジを繰り返す」なのであればなおさらですね。\nこの点に関しては、「サービス開発の継続性」はSPAのほうが低コストと元記事でも書かれている通りです。</p>\n<p>「エンジニアのスキルはあまり高くない」という前提に、「SPAよりもMPAの経験のほうが長い」を暗黙的に含んでいる気がします。\nSPAの経験のほうが長い私にとっては、逆にMPAをコストが高いと感じます。\n慣れている技術を優先しつつ、どちらも使えるならSPAを使うのが良いのではないでしょうか。</p>","frontmatter":{"title":"SPAはコストが高いのか","date":"2022-03-31","description":null,"header":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","images":{"fallback":{"src":"/static/4250bbf87e0ac320482281320b03b9df/5267c/header.jpg","srcSet":"/static/4250bbf87e0ac320482281320b03b9df/7284f/header.jpg 750w,\n/static/4250bbf87e0ac320482281320b03b9df/29ba9/header.jpg 1080w,\n/static/4250bbf87e0ac320482281320b03b9df/c8896/header.jpg 1366w,\n/static/4250bbf87e0ac320482281320b03b9df/5267c/header.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/static/4250bbf87e0ac320482281320b03b9df/57584/header.webp 750w,\n/static/4250bbf87e0ac320482281320b03b9df/984df/header.webp 1080w,\n/static/4250bbf87e0ac320482281320b03b9df/4a276/header.webp 1366w,\n/static/4250bbf87e0ac320482281320b03b9df/9c00f/header.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6666666666666666}}},"ogp":{"publicURL":"/static/789d3cb5a81a28016f445fe4c7f7dbf3/ogp.jpg"},"tags":["SPA","MPA","JavaScript","TypeScript"]},"tableOfContents":"<ul>\n<li><a href=\"#%E5%89%8D%E6%8F%90\">前提</a></li>\n<li><a href=\"#3-web%E6%A8%99%E6%BA%96%E3%81%AE%E6%8C%99%E5%8B%95%E3%81%AE%E5%AE%9F%E7%8F%BE%E3%81%AE%E3%81%97%E3%82%84%E3%81%99%E3%81%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">「3. web標準の挙動の実現のしやすさ」について</a></li>\n<li><a href=\"#4-%E3%82%BB%E3%82%AD%E3%83%A5%E3%82%A2%E3%81%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%B5%81%E5%87%BA%E3%81%99%E3%82%8B%E5%8F%AF%E8%83%BD%E6%80%A7%E3%81%AE%E9%AB%98%E4%BD%8E%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">「4. セキュアなデータを流出する可能性の高低」について</a></li>\n<li><a href=\"#5%E3%83%90%E3%82%B0%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E6%B0%97%E3%81%A5%E3%81%8D%E3%82%84%E3%81%99%E3%81%95--%E5%AF%BE%E5%BF%9C%E3%81%AE%E3%81%97%E3%82%84%E3%81%99%E3%81%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">「5.バグがあった時の気づきやすさ / 対応のしやすさ」について</a></li>\n<li><a href=\"#6%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E5%A4%9A%E3%81%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">「6.ドキュメントの多さ」について</a></li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>"}},"pageContext":{"id":"7bdc2c73-2f3d-563d-a207-48a5501b3d2b"}},
    "staticQueryHashes": ["3159585216","3357329864","3468387890","3862782001"]}