{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/feature-based-project-structure-on-frontend/","result":{"data":{"markdownRemark":{"fields":{"slug":"/blog/feature-based-project-structure-on-frontend/"},"id":"35da1a63-4df7-5561-81f8-d745f6b1fffa","excerpt":"ディレクトリ構成って難しいですよね。\nバックエンドでは Clean Architecture が安定択ですが、フロントエンドではいまだにベストプラクティスが定まっていません。 この記事では、現時点で良さそうなディレクトリ構成案を紹介しつつ、他の有名な構成もまとめます。\nなお、フレームワークの例として Next.js…","html":"<p>ディレクトリ構成って難しいですよね。\nバックエンドでは Clean Architecture が安定択ですが、フロントエンドではいまだにベストプラクティスが定まっていません。</p>\n<p>この記事では、現時点で良さそうなディレクトリ構成案を紹介しつつ、他の有名な構成もまとめます。\nなお、フレームワークの例として Next.js を扱います。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── __tests__/\n├── config/\n│   ├── locales/\n│   └── consts.tsx\n├── features/\n│   └── user/\n│       ├── apis/\n│       ├── components/\n│       │   ├── UserCard/\n│       │   │   ├── index.ts\n│       │   │   ├── UserCard.tsx\n│       │   │   └── UserCard.module.css\n│       │   └── index.ts\n│       ├── contexts/\n│       ├── functions/\n│       ├── hooks/\n│       ├── stores/\n│       ├── types/\n│       └── index.ts\n├── lib/\n├── pages/\n│   └── users/\n│       ├── _components/\n│       │   ├── UsersPage/\n│       │   │   ├── index.ts\n│       │   │   └── UsersPage.tsx\n│       │   ├── UsersTemplate/\n│       │   │   ├── index.ts\n│       │   │   ├── UsersTemplate.tsx\n│       │   │   └── UsersTemplate.module.css\n│       │   ├── UsersHeader/\n│       │   ├── UsersFooter/\n│       │   └── index.ts\n│       └── index.page.tsx\n├── public/\n├── shared/\n│   ├── apis/\n│   ├── components/\n│   │   ├── Button/\n│   │   │   ├── index.ts\n│   │   │   ├── Button.tsx\n│   │   │   └── Button.module.css\n│   │   └── index.ts\n│   ├── contexts/\n│   ├── functions/\n│   ├── hooks/\n│   ├── stores/\n│   ├── types/\n│   └── index.ts\n└── styles/\n    └── global.css</code></pre></div>\n<p>以下の順で、各フォルダはそれより上にあるフォルダにのみ依存させます。</p>\n<ul>\n<li><code class=\"language-text\">config/</code></li>\n<li><code class=\"language-text\">lib/</code></li>\n<li><code class=\"language-text\">shared/</code></li>\n<li><code class=\"language-text\">features/</code></li>\n<li><code class=\"language-text\">pages/</code></li>\n</ul>\n<p>各フォルダに置くファイルの種類は以下の通りです。</p>\n<ul>\n<li><code class=\"language-text\">__tests__/</code>\n<ul>\n<li>テストファイル</li>\n</ul>\n</li>\n<li><code class=\"language-text\">public/</code>\n<ul>\n<li>画像や音声などの静的なファイル</li>\n</ul>\n</li>\n<li><code class=\"language-text\">styles/</code>\n<ul>\n<li>CSS</li>\n</ul>\n</li>\n<li><code class=\"language-text\">config/</code>\n<ul>\n<li>設定ファイル</li>\n</ul>\n</li>\n<li><code class=\"language-text\">lib/</code>\n<ul>\n<li>外部ライブラリの初期設定をして再エクスポートするファイル</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/</code>\n<ul>\n<li>複数の機能で共有するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/apis/</code>\n<ul>\n<li>外部との通信に関するロジックを含むコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/components/</code>\n<ul>\n<li>特定のコンポーネントに関するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/components/[component]/</code>\n<ul>\n<li>あるコンポーネント <code class=\"language-text\">[component]</code> に関するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/contexts/</code>\n<ul>\n<li>ReactのContextに関するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/functions/</code>\n<ul>\n<li>UIに関係しないコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/hooks/</code>\n<ul>\n<li>Reactの Custom Hooks に関するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/stores/</code>\n<ul>\n<li>データの永続化に関するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/types/</code>\n<ul>\n<li>TypeScript の型定義</li>\n</ul>\n</li>\n<li><code class=\"language-text\">features/</code>\n<ul>\n<li>特定の機能に関するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">features/[feature]/</code>\n<ul>\n<li>ある機能 <code class=\"language-text\">[feature]</code> に関するコード</li>\n<li>以下の構造は <code class=\"language-text\">shared/</code> と同様</li>\n</ul>\n</li>\n<li><code class=\"language-text\">pages/</code>\n<ul>\n<li>特定のページに関するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">pages/[page]/</code>\n<ul>\n<li>あるページ <code class=\"language-text\">[page]</code> に関するコード</li>\n</ul>\n</li>\n<li><code class=\"language-text\">pages/[page]/_components/</code>\n<ul>\n<li>特定のコンポーネントに関するコード</li>\n</ul>\n</li>\n</ul>\n<p>ポイントは機能ごとに分けて <code class=\"language-text\">features/</code> の下に置くことですね。\nここでの「機能」は、エンティティとするのがわかりやすいと思います。\nたとえば、サインアップ、サインイン、ユーザ検索をそれぞれ別のフォルダにするのではなく、<code class=\"language-text\">user/</code> フォルダの中にまとめるということです。\nユーザに関する機能が多くなれば階層を1つ増やしてそれぞれ分けても良いです。</p>\n<p><code class=\"language-text\">shared/</code>、<code class=\"language-text\">features/</code>、コンポーネントのフォルダには <code class=\"language-text\">index.ts</code> を置きます。\nこれはフォルダ内のモジュールを再エクスポートするファイルです。\nフォルダ外からは <code class=\"language-text\">index.ts</code> 経由でのみインポートします。\nそれによって2つのメリットが得られます。</p>\n<ul>\n<li>一部のみを公開するよう制御できる</li>\n<li>インポート時のパスが簡潔になる\n<ul>\n<li>たとえば <code class=\"language-text\">import { UserCard } from '@/features/user/components/UserCard/UserCard'</code> ではなく <code class=\"language-text\">import { UserCard } from '@/features/user'</code> と書ける</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"コンポーネントの置き場所\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E7%BD%AE%E3%81%8D%E5%A0%B4%E6%89%80\" aria-label=\"コンポーネントの置き場所 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コンポーネントの置き場所</h3>\n<p>上に記載した通り、コンポーネントを置く場所は3つあります。</p>\n<ul>\n<li><code class=\"language-text\">pages/[page]/_components/[component]/</code>\n<ul>\n<li>特定のページに関するコンポーネント</li>\n</ul>\n</li>\n<li><code class=\"language-text\">features/[feature]/components/[component]/</code>\n<ul>\n<li>特定の機能に関するコンポーネント</li>\n</ul>\n</li>\n<li><code class=\"language-text\">shared/components/[component]/</code>\n<ul>\n<li>複数の機能で共有するコンポーネント</li>\n</ul>\n</li>\n</ul>\n<p>最も狭いスコープに置くことで、無駄に混ざらないで済むようになります。</p>\n<p><code class=\"language-text\">pages/[page]/_components/[component]/</code> について、フォルダ名に <code class=\"language-text\">_</code> が付いているのは、ページの階層と区別するためです。\nNext.js でいう <code class=\"language-text\">_app.tsx</code> や <code class=\"language-text\">_document.tsx</code> と同じです。\nなお、<code class=\"language-text\">next.config.js</code> に以下の設定をすることで、拡張子が <code class=\"language-text\">page.tsx</code> のファイルのみページコンポーネントとして認識させることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">pageExtensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'page.tsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>参考: <a href=\"https://nextjs.org/docs/pages/api-reference/next-config-js/pageExtensions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">next.config.js Options: pageExtensions | Next.js</a></p>\n<p>また、<code class=\"language-text\">pages/[page]/_components/[component]/</code> には、Atomic Design のTemplateとPageを置きます。\n上の例だと <code class=\"language-text\">UsersTemplate</code> と <code class=\"language-text\">UsersPage</code> です。\nTemplateでページのレイアウトを組み立て、Pageでデータを注入します。</p>\n<h2 id=\"他の構成\" style=\"position:relative;\"><a href=\"#%E4%BB%96%E3%81%AE%E6%A7%8B%E6%88%90\" aria-label=\"他の構成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>他の構成</h2>\n<p>ここからは他のディレクトリ構成をまとめます。</p>\n<h3 id=\"タイプベース\" style=\"position:relative;\"><a href=\"#%E3%82%BF%E3%82%A4%E3%83%97%E3%83%99%E3%83%BC%E3%82%B9\" aria-label=\"タイプベース permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>タイプベース</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── components/\n│   ├── Button.tsx\n│   ├── UserCard.tsx\n│   ├── UsersHeader.tsx\n│   └── UsersFooter.tsx\n├── contexts/\n├── hooks/\n└── pages/\n    └── users.page.tsx</code></pre></div>\n<p>ファイルのタイプごとに分ける、最も単純で古くから使われている構成です。\nフレームワークのサンプルなどでもよく見ます。\n参考: <a href=\"https://github.com/vercel/next.js/tree/canary/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/vercel/next.js/tree/canary/examples</a></p>\n<p>コンポーネントやページが増えるにつれて、特定のページでのみ使用しているコンポーネントとそれ以外が混ざったり、コンポーネント間の依存関係が無秩序になったりしてカオスになります。</p>\n<h3 id=\"atomic-design\" style=\"position:relative;\"><a href=\"#atomic-design\" aria-label=\"atomic design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Atomic Design</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── components/\n│   ├── atoms/\n│   │   └── Button.tsx\n│   ├── molecules/\n│   │   └── UserCard.tsx\n│   ├── organisms/\n│   │   ├── UsersHeader.tsx\n│   │   └── UsersFooter.tsx\n│   ├── templates/\n│   │   └── UsersTemplate.tsx\n│   └── pages/\n│       └── UsersPage.tsx\n├── contexts/\n├── hooks/\n└── pages/\n    └── users.page.tsx</code></pre></div>\n<p><a href=\"https://atomicdesign.bradfrost.com/chapter-2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Atomic Design Methodology | Atomic Design by Brad Frost</a></p>\n<p>一時期とても流行った構成です。\n<code class=\"language-text\">components/</code> を以下のように分割します。</p>\n<ul>\n<li>atoms\n<ul>\n<li>単一のHTMLタグ</li>\n</ul>\n</li>\n<li>molecules\n<ul>\n<li>複数のHTMLタグ</li>\n</ul>\n</li>\n<li>organisms\n<ul>\n<li>ページの一部の領域</li>\n</ul>\n</li>\n<li>templates\n<ul>\n<li>ページ全体</li>\n</ul>\n</li>\n<li>pages\n<ul>\n<li>templatesにデータを渡すコンポーネント</li>\n</ul>\n</li>\n</ul>\n<p>下のフォルダはそれより上か同じフォルダにのみ依存します。\n依存関係が明確になったことで再利用性が向上しました。</p>\n<p>ただ、以下の問題が残っています。</p>\n<ul>\n<li>特定のページでのみ使用しているコンポーネントとそれ以外が混ざる問題は解決されていない\n<ul>\n<li><code class=\"language-text\">pages/</code> 以下にも atoms/molecules/organisms/templates を設けるパターンもありますが、複雑になります</li>\n</ul>\n</li>\n<li>atoms/molecules/organisms の基準が人によって違う\n<ul>\n<li>上に記載したのは公式の基準ですが、ドメインの知識を持つかどうかや、単体でページに存在できるかどうかで分ける人もいます</li>\n</ul>\n</li>\n<li>moleculesやorganismsが普段使わない言葉なのでわかりにくい</li>\n</ul>\n<p>一度採用したものの、最終的にはやめた話もよく見ますね。</p>\n<ul>\n<li><a href=\"https://note.com/tabelog_frontend/n/n07b4077f5cf3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Atomic Designをやめてディレクトリ構造を見直した話｜食べログ フロントエンドエンジニアブログ｜note</a></li>\n<li><a href=\"https://zenn.dev/brachio_takumi/articles/2ab9ef9fbe4159\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reactのディレクトリ構成でAtomicデザインをやめた話</a></li>\n<li><a href=\"https://tech.itandi.co.jp/entry/react-give-up-atomic-design\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reactを使ったコンポーネント指向設計で、Atomic Designをやめようとしている話 - ITANDI Engineer Blog</a></li>\n<li><a href=\"https://logmi.jp/tech/articles/300657\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Atomic Designから派生した、“オルタネイティヴ”な5つのデザインシステム - ログミーTech</a></li>\n</ul>\n<h3 id=\"clean-architecture\" style=\"position:relative;\"><a href=\"#clean-architecture\" aria-label=\"clean architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clean Architecture</h3>\n<p>Clean Architecture をフロントエンドに適用するのはどうでしょうか？\n理論的には適用できますが、あまり採用事例を見ないですね。\n理由としては以下が考えられます。</p>\n<ul>\n<li>ビジネスロジックはほとんどバックエンドで実装して、フロントエンドにはあまり実装しないため</li>\n<li>外部の Web API やDBなどを使わないことも多いため</li>\n<li>コンポーネント内にUIとロジックを両方書くため</li>\n</ul>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a> の構成の場合、<code class=\"language-text\">functions/</code> が最も内側の Enterprise Business Rules 層、<code class=\"language-text\">lib/</code>、<code class=\"language-text\">apis/</code>、<code class=\"language-text\">stores/</code> が最も外側の Frameworks &#x26; Drivers 層に相当します。\nClean Architecture を適用したい場合は、各コンポーネントから外側の層を直接参照せずに、引数で受け取るようにして、Pageから注入することで実現できます。</p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://zenn.dev/kichion/articles/fddf0eb35ffa2a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ぼくのかんがえたフロントエンドアーキテクチャ</a></li>\n<li><a href=\"https://qiita.com/noboru_i/items/3c004cac4d998fff9e34\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">フロントエンドにクリーンアーキテクチャはいらない（ことが多いと思う） - Qiita</a></li>\n</ul>\n<h2 id=\"元ネタ\" style=\"position:relative;\"><a href=\"#%E5%85%83%E3%83%8D%E3%82%BF\" aria-label=\"元ネタ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>元ネタ</h2>\n<p>機能ベースのディレクトリ構成は私が考えたものではありません。\n私が調べた範囲で最も古いのは、2013年に AngularJS の文脈で登場しているようです。\nAtomic Design 離れが始まったここ数年で徐々に広がっています。</p>\n<ul>\n<li><a href=\"https://github.com/openmindlab/angularjs-best-practices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">openmindlab/angularjs-best-practices</a></li>\n<li><a href=\"https://softwareengineering.stackexchange.com/questions/338597/folder-by-type-or-folder-by-feature\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">project structure - Folder-by-type or Folder-by-feature - Software Engineering Stack Exchange</a></li>\n<li><a href=\"https://blog.mitsuruog.info/2014/12/angular-structure.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">I am mitsuruog | いま一番気に入っているAngularJSのプロジェクト構成</a></li>\n</ul>\n<p>ちなみに Atomic Design が生まれたのも2013年です。\n<a href=\"https://bradfrost.com/blog/post/atomic-web-design/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Atomic Design | Brad Frost</a></p>\n<p>この記事のディレクトリ構成は以下のものを参考にしています。</p>\n<ul>\n<li><a href=\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bulletproof-react/project-structure.md at master · alan2207/bulletproof-react · GitHub</a></li>\n<li><a href=\"https://dev.to/profydev/screaming-architecture-evolution-of-a-react-folder-structure-4g25\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Screaming Architecture - Evolution of a React folder structure - DEV Community</a></li>\n<li><a href=\"https://feature-sliced.design/docs/get-started/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Overview | Feature-Sliced Design</a></li>\n</ul>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>フロントエンドのディレクトリ構成案を紹介しました。\nプロジェクトの大きさやフレームワークによっても変わってくるので難しいですね。\n規模が小さいころはあまり気にせず、大きくなってから考えても良いと思います。</p>","frontmatter":{"title":"フロントエンドにおける機能ベースのディレクトリ構成案","date":"2023-05-07","description":null,"header":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","images":{"fallback":{"src":"/static/994221431fc70ee5cc39cf028500fa42/bbd03/header.jpg","srcSet":"/static/994221431fc70ee5cc39cf028500fa42/99918/header.jpg 750w,\n/static/994221431fc70ee5cc39cf028500fa42/f449b/header.jpg 1080w,\n/static/994221431fc70ee5cc39cf028500fa42/34fc5/header.jpg 1366w,\n/static/994221431fc70ee5cc39cf028500fa42/bbd03/header.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/static/994221431fc70ee5cc39cf028500fa42/e5fa4/header.webp 750w,\n/static/994221431fc70ee5cc39cf028500fa42/171d7/header.webp 1080w,\n/static/994221431fc70ee5cc39cf028500fa42/b1984/header.webp 1366w,\n/static/994221431fc70ee5cc39cf028500fa42/ad9f4/header.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.5}}},"ogp":{"publicURL":"/static/b2449de3c0faba80f64fad5ddf97c727/ogp.jpg"},"tags":["フロントエンド","設計","Atomic Design","React","Next.js"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n<ul>\n<li><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E7%BD%AE%E3%81%8D%E5%A0%B4%E6%89%80\">コンポーネントの置き場所</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%BB%96%E3%81%AE%E6%A7%8B%E6%88%90\">他の構成</a></p>\n<ul>\n<li><a href=\"#%E3%82%BF%E3%82%A4%E3%83%97%E3%83%99%E3%83%BC%E3%82%B9\">タイプベース</a></li>\n<li><a href=\"#atomic-design\">Atomic Design</a></li>\n<li><a href=\"#clean-architecture\">Clean Architecture</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%85%83%E3%83%8D%E3%82%BF\">元ネタ</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></p>\n</li>\n</ul>"}},"pageContext":{"id":"35da1a63-4df7-5561-81f8-d745f6b1fffa"}},"staticQueryHashes":["1025666349","2148507062","4241674040","739241604"],"slicesMap":{}}