{"version":3,"sources":["webpack:///./src/components/header-common.js","webpack:///./src/components/layout-common.js","webpack:///./src/components/thumbnail-raster.js","webpack:///./src/components/thumbnail-vector-archive.js","webpack:///./src/components/search.js","webpack:///./src/pages/archive.js"],"names":["HeaderCommon","titleSvg","className","src","alt","LayoutCommon","children","mainClassName","isHidden","ThumbnailRaster","img","fluid","aspectRatio","itemProp","ThumbnailVectorArchive","useState","setIsHidden","classNames","join","onLoad","Search","query","data","useStaticQuery","queryTag","get","tag","setTag","tagPattern","RegExp","results","allMarkdownRemark","nodes","filter","node","nodeTags","frontmatter","tags","every","nodeTag","test","type","value","onChange","event","target","file","publicURL","style","listStyle","padding","map","result","title","fields","slug","imgSrc","header","childImageSharp","thumbnail","key","itemScope","itemType","to","dateTime","date","replace","pageQuery","Archive","location","URLSearchParams","search","url"],"mappings":"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","file":"component---src-pages-archive-js-fc272acfe80285ee4191.js","sourcesContent":["import React from \"react\"\n\nconst HeaderCommon = ({ titleSvg }) => {\n  return <img className=\"heading-common\" src={titleSvg} alt=\"heading title\" />\n}\n\nexport default HeaderCommon\n","import React from \"react\"\nimport HeaderCommon from \"./header-common\"\nimport Nav from \"./nav\"\n\nconst LayoutCommon = ({ children, titleSvg, mainClassName }) => {\n  return (\n    <div className=\"global-wrapper\">\n      <header className=\"global-header-common\">\n        <HeaderCommon titleSvg={titleSvg} />\n      </header>\n      <Nav isHidden={false} className=\"global-nav-wrapper\" />\n      <main className={mainClassName}>{children}</main>\n    </div>\n  )\n}\n\nexport default LayoutCommon\n","import React from \"react\"\nimport Img from \"gatsby-image\"\n\nconst ThumbnailRaster = ({ img }) => {\n  return (\n    <Img\n      className=\"thumbnail-raster\"\n      fluid={{ ...img, aspectRatio: 1 }}\n      alt=\"thumbnail\"\n      itemProp=\"image\"\n    />\n  )\n}\n\nexport default ThumbnailRaster\n","import React, { useState } from \"react\"\n\nconst ThumbnailVectorArchive = ({ img }) => {\n  const [isHidden, setIsHidden] = useState(true)\n\n  const className = \"thumbnail-vector-archive\"\n  const classNames = isHidden ? [className, \"is-hidden\"] : [className]\n\n  return (\n    <div className=\"thumbnail-vector-archive-space\">\n      <img\n        src={img}\n        className={classNames.join(\" \")}\n        alt=\"thumbnail\"\n        itemProp=\"image\"\n        onLoad={() => setIsHidden(false)}\n      />\n    </div>\n  )\n}\n\nexport default ThumbnailVectorArchive\n","import { graphql, Link, useStaticQuery } from \"gatsby\"\nimport React, { useState } from \"react\"\nimport ThumbnailRaster from \"./thumbnail-raster\"\nimport ThumbnailVectorArchive from \"./thumbnail-vector-archive\"\n\n/**\n * @param {object} param0\n * @param {URLSearchParams} param0.query\n */\nconst Search = ({ query }) => {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n          nodes {\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"YYYY-MM-DD\")\n              title\n              header {\n                childImageSharp {\n                  fluid(\n                    maxWidth: 300\n                    srcSetBreakpoints: [300]\n                    toFormat: WEBP\n                  ) {\n                    ...GatsbyImageSharpFluid_noBase64\n                  }\n                }\n              }\n              tags\n            }\n          }\n        }\n        file(\n          sourceInstanceName: { eq: \"assets\" }\n          relativePath: { eq: \"search.svg\" }\n        ) {\n          publicURL\n        }\n      }\n    `\n  )\n\n  const queryTag = query.get(\"tag\")\n  const [tag, setTag] = useState(queryTag || \"\")\n  const tagPattern = new RegExp(tag, \"i\")\n\n  const results = data.allMarkdownRemark.nodes.filter(node => {\n    const nodeTags = node.frontmatter.tags || []\n    if (tag && nodeTags.every(nodeTag => !tagPattern.test(nodeTag))) {\n      return false\n    }\n\n    return true\n  })\n\n  return (\n    <div>\n      <section className=\"search-area\">\n        <label>\n          <h2 className=\"search-area-label-tag\">タグ</h2>\n          <div className=\"search-area-input\">\n            <input\n              type=\"text\"\n              value={tag}\n              onChange={event => {\n                setTag(event.target.value)\n              }}\n            />\n            <img\n              className=\"search-button\"\n              src={data.file.publicURL}\n              alt=\"search\"\n            />\n          </div>\n        </label>\n      </section>\n      <ul\n        className=\"search-result-list\"\n        style={{ listStyle: `none`, padding: 0 }}\n      >\n        {results.map(result => {\n          const title = result.frontmatter.title || result.fields.slug\n          const imgSrc = result.frontmatter.header?.childImageSharp?.fluid\n          const thumbnail = imgSrc ? (\n            <ThumbnailRaster img={imgSrc} />\n          ) : (\n            <ThumbnailVectorArchive img={\"/favicon.svg\"} />\n          )\n          const tags = result.frontmatter.tags\n            ? result.frontmatter.tags.map(tag => {\n                return <li key={tag}>{tag}</li>\n              })\n            : null\n\n          return (\n            <li key={result.fields.slug}>\n              <article\n                className=\"search-result-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <Link to={result.fields.slug} itemProp=\"url\">\n                  <div className=\"search-result-image-wrapper\">{thumbnail}</div>\n                  <section>\n                    <h2\n                      className=\"search-result-item-title\"\n                      itemProp=\"headline\"\n                    >\n                      {title}\n                    </h2>\n                    <time dateTime={result.frontmatter.date}>\n                      {result.frontmatter.date.replace(/-/g, \".\")}\n                    </time>\n                    <ul className=\"search-result-tag-list\">{tags}</ul>\n                  </section>\n                </Link>\n              </article>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default Search\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport LayoutCommon from \"../components/layout-common\"\nimport SEO from \"../components/seo\"\nimport Search from \"../components/search\"\n\nconst Archive = ({ data, location }) => {\n  const query = new URLSearchParams(location.search)\n  return (\n    <LayoutCommon\n      titleSvg={data.file.publicURL}\n      mainClassName=\"global-main-archive\"\n    >\n      <SEO title=\"archive\" location={location} url=\"/archive\" />\n      <section className=\"archive-page\">\n        <Search query={query} />\n      </section>\n    </LayoutCommon>\n  )\n}\n\nexport default Archive\n\nexport const pageQuery = graphql`\n  query {\n    file(\n      sourceInstanceName: { eq: \"assets\" }\n      relativePath: { eq: \"archive.svg\" }\n    ) {\n      publicURL\n    }\n  }\n`\n"],"sourceRoot":""}