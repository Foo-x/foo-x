{"version":3,"file":"component---src-pages-index-js-eca69077feeb4b56effb.js","mappings":"2JAsBA,EAlBkB,WAChB,IAAQA,GAAUC,EAAAA,EAAAA,gBAAe,cAAzBD,MAUR,OACE,sBAAIE,UCfe,uCDgBjB,uBAAKA,UCfc,wCDeiBC,IAAKH,EAAMI,UAAWC,IAAI,a,4EE+BpE,EA5Ce,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAE9BC,EADQ,MACKH,EAASI,SACtBC,EAAgBF,ECJG,sCDIiC,cACpDG,EAAeH,ECNU,4CDQ3B,qBAEEI,GAASC,EAAAA,EAAAA,QAAO,MACtB,GAAgCC,EAAAA,EAAAA,WAAS,GAAlCC,EAAP,KAAiBC,EAAjB,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACR,IAcMC,EAAW,IAAIC,sBAdJ,SAAAC,GACfA,EAAQC,SAAQ,SAAAC,GACVA,EAAMC,eACRP,GAAY,GAEZA,GAAY,QAIF,CACdQ,KAAM,KACNC,WAAY,gBACZC,UAAW,IAKb,OAFAR,EAASS,QAAQf,EAAOgB,SAEjB,WACLV,EAASW,gBAEV,IAED,uBAAK5B,UAAU,iBAAiB,oBAAmBO,GACjD,0BAAQP,UCtCY,sCDsCqBM,GACzC,gBAAC,IAAD,CAAKQ,SAAUA,EAAUd,UAAWU,IACpC,wBAAMmB,IAAKlB,EAAQX,UAAWS,GAC3BJ,M,wHEhBT,EAvBwB,SAAC,GAAa,IAAXyB,EAAU,EAAVA,IACzB,GAAgCjB,EAAAA,EAAAA,WAAS,GAAlCC,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,GAAY,KACX,IAEH,IAAMf,ECRqB,kDDSrB+B,EAAajB,EAAW,CAACd,EAAW,aAAe,CAACA,GAE1D,OACE,uBAAKA,UCbyB,wDDc5B,uBACEC,IAAK6B,EACL9B,UAAW+B,EAAWC,KAAK,KAC3B7B,IAAI,YACJ8B,SAAS,QACTC,QAAQ,WE4BhB,EAxCkB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAM/B,EAAe,EAAfA,SACnBgC,EAAQD,EAAKE,kBAAkBC,MAErC,OACE,gBAAC,IAAD,CAAQlC,SAAUA,EAAUE,OAAQ,gBAAC,IAAD,OAClC,gBAAC,IAAD,CAAKiC,MAAM,YAAYnC,SAAUA,EAAUoC,IAAI,MAC/C,sBAAIxC,UCbY,gCDagByC,MAAO,CAAEC,UAAU,OAASC,QAAS,IAClEP,EAAMQ,KAAI,SAAAC,GAAS,IAAD,EACXN,EAAQM,EAAKC,YAAYP,OAASM,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACEhD,UCnBU,oCDoBVkD,WAAS,EACTC,SAAS,6BAET,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMf,SAAS,OACnC,uBAAKjC,UCvBe,iDDwBlB,gBAAC,EAAD,CACE8B,KACE,UAAAe,EAAKC,YAAYQ,iBAAjB,eAA4BpD,YAAa,kBAI/C,+BACE,0BACE,wBAAM+B,SAAS,YAAYM","sources":["webpack://foo-x/./src/components/header-top.js","webpack://foo-x/./src/styles/components/header-top.module.css","webpack://foo-x/./src/components/layout.js","webpack://foo-x/./src/styles/components/layout.module.css","webpack://foo-x/./src/components/thumbnail-vector.js","webpack://foo-x/./src/styles/components/thumbnail-vector.module.css","webpack://foo-x/./src/pages/index.js","webpack://foo-x/./src/styles/pages/index.module.css"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport * as styles from \"styles/components/header-top.module.css\"\n\nconst HeaderTop = () => {\n  const { brand } = useStaticQuery(\n    graphql`\n      query {\n        brand: file(absolutePath: { regex: \"/brand.svg/\" }) {\n          publicURL\n        }\n      }\n    `\n  )\n\n  return (\n    <h1 className={styles.headerTop}>\n      <img className={styles.headerBrand} src={brand.publicURL} alt=\"foo-x\" />\n    </h1>\n  )\n}\n\nexport default HeaderTop\n","// extracted by mini-css-extract-plugin\nexport var headerTop = \"header-top-module--headerTop--PIpp9\";\nexport var headerBrand = \"header-top-module--headerBrand--0tWdZ\";","import React, { useEffect, useRef, useState } from \"react\"\nimport * as styles from \"styles/components/layout.module.css\"\nimport Nav from \"./nav\"\n\nconst Layout = ({ location, children, header }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  const mainClassName = isRootPath ? styles.globalMainTop : \"global-main\"\n  const navClassName = isRootPath\n    ? styles.globalNavWrapperTop\n    : \"global-nav-wrapper\"\n\n  const target = useRef(null)\n  const [isHidden, setIsHidden] = useState(true)\n\n  useEffect(() => {\n    const callback = entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setIsHidden(false)\n        } else {\n          setIsHidden(true)\n        }\n      })\n    }\n    const options = {\n      root: null,\n      rootMargin: \"0px 0px -100%\",\n      threshold: 0,\n    }\n    const observer = new IntersectionObserver(callback, options)\n    observer.observe(target.current)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [])\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className={styles.globalHeader}>{header}</header>\n      <Nav isHidden={isHidden} className={navClassName} />\n      <main ref={target} className={mainClassName}>\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n","// extracted by mini-css-extract-plugin\nexport var globalHeader = \"layout-module--globalHeader--SSHXP\";\nexport var globalNavWrapperTop = \"layout-module--globalNavWrapperTop--EliNB\";\nexport var globalMainTop = \"layout-module--globalMainTop--0m0aJ\";","import React, { useEffect, useState } from \"react\"\nimport * as styles from \"styles/components/thumbnail-vector.module.css\"\n\nconst ThumbnailVector = ({ img }) => {\n  const [isHidden, setIsHidden] = useState(true)\n\n  useEffect(() => {\n    setIsHidden(false)\n  }, [])\n\n  const className = styles.thumbnailVector\n  const classNames = isHidden ? [className, \"is-hidden\"] : [className]\n\n  return (\n    <div className={styles.thumbnailVectorSpace}>\n      <img\n        src={img}\n        className={classNames.join(\" \")}\n        alt=\"thumbnail\"\n        itemProp=\"image\"\n        loading=\"lazy\"\n      />\n    </div>\n  )\n}\n\nexport default ThumbnailVector\n","// extracted by mini-css-extract-plugin\nexport var thumbnailVectorSpace = \"thumbnail-vector-module--thumbnailVectorSpace--054Gb\";\nexport var thumbnailVector = \"thumbnail-vector-module--thumbnailVector--yyt0p\";","import { graphql, Link } from \"gatsby\"\nimport React from \"react\"\nimport * as styles from \"styles/pages/index.module.css\"\nimport HeaderTop from \"../components/header-top\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport ThumbnailVector from \"../components/thumbnail-vector\"\n\nconst BlogIndex = ({ data, location }) => {\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout location={location} header={<HeaderTop />}>\n      <Seo title=\"All posts\" location={location} url=\"/\" />\n      <ul className={styles.postList} style={{ listStyle: `none`, padding: 0 }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className={styles.postListItem}\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <Link to={post.fields.slug} itemProp=\"url\">\n                  <div className={styles.postListItemImageWrapper}>\n                    <ThumbnailVector\n                      img={\n                        post.frontmatter.thumbnail?.publicURL || \"/favicon.svg\"\n                      }\n                    />\n                  </div>\n                  <section>\n                    <h2>\n                      <span itemProp=\"headline\">{title}</span>\n                    </h2>\n                  </section>\n                </Link>\n              </article>\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          thumbnail {\n            publicURL\n          }\n        }\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nexport var postList = \"index-module--postList--x7WWN\";\nexport var postListItem = \"index-module--postListItem--+cjIt\";\nexport var postListItemImageWrapper = \"index-module--postListItemImageWrapper--qjOF-\";"],"names":["brand","useStaticQuery","className","src","publicURL","alt","location","children","header","isRootPath","pathname","mainClassName","navClassName","target","useRef","useState","isHidden","setIsHidden","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","root","rootMargin","threshold","observe","current","disconnect","ref","img","classNames","join","itemProp","loading","data","posts","allMarkdownRemark","nodes","title","url","style","listStyle","padding","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","thumbnail"],"sourceRoot":""}